// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PatchClient is the client API for Patch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PatchClient interface {
	// unary rpc - ping status check
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// unary rpc - read/write rights check
	RightsCheck(ctx context.Context, in *RightsCheckRequest, opts ...grpc.CallOption) (*RightsCheckResponse, error)
	// client streaming rpc
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (Patch_UploadFileClient, error)
	// server streaming rpc
	ApplyPatch(ctx context.Context, in *ApplyPatchRequest, opts ...grpc.CallOption) (Patch_ApplyPatchClient, error)
}

type patchClient struct {
	cc grpc.ClientConnInterface
}

func NewPatchClient(cc grpc.ClientConnInterface) PatchClient {
	return &patchClient{cc}
}

func (c *patchClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/Patch/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patchClient) RightsCheck(ctx context.Context, in *RightsCheckRequest, opts ...grpc.CallOption) (*RightsCheckResponse, error) {
	out := new(RightsCheckResponse)
	err := c.cc.Invoke(ctx, "/Patch/RightsCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patchClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (Patch_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &Patch_ServiceDesc.Streams[0], "/Patch/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &patchUploadFileClient{stream}
	return x, nil
}

type Patch_UploadFileClient interface {
	Send(*UploadFileRequest) error
	CloseAndRecv() (*UploadFileResponse, error)
	grpc.ClientStream
}

type patchUploadFileClient struct {
	grpc.ClientStream
}

func (x *patchUploadFileClient) Send(m *UploadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *patchUploadFileClient) CloseAndRecv() (*UploadFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *patchClient) ApplyPatch(ctx context.Context, in *ApplyPatchRequest, opts ...grpc.CallOption) (Patch_ApplyPatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &Patch_ServiceDesc.Streams[1], "/Patch/ApplyPatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &patchApplyPatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Patch_ApplyPatchClient interface {
	Recv() (*ApplyPatchResponse, error)
	grpc.ClientStream
}

type patchApplyPatchClient struct {
	grpc.ClientStream
}

func (x *patchApplyPatchClient) Recv() (*ApplyPatchResponse, error) {
	m := new(ApplyPatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PatchServer is the server API for Patch service.
// All implementations must embed UnimplementedPatchServer
// for forward compatibility
type PatchServer interface {
	// unary rpc - ping status check
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// unary rpc - read/write rights check
	RightsCheck(context.Context, *RightsCheckRequest) (*RightsCheckResponse, error)
	// client streaming rpc
	UploadFile(Patch_UploadFileServer) error
	// server streaming rpc
	ApplyPatch(*ApplyPatchRequest, Patch_ApplyPatchServer) error
	mustEmbedUnimplementedPatchServer()
}

// UnimplementedPatchServer must be embedded to have forward compatible implementations.
type UnimplementedPatchServer struct {
}

func (UnimplementedPatchServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedPatchServer) RightsCheck(context.Context, *RightsCheckRequest) (*RightsCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RightsCheck not implemented")
}
func (UnimplementedPatchServer) UploadFile(Patch_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedPatchServer) ApplyPatch(*ApplyPatchRequest, Patch_ApplyPatchServer) error {
	return status.Errorf(codes.Unimplemented, "method ApplyPatch not implemented")
}
func (UnimplementedPatchServer) mustEmbedUnimplementedPatchServer() {}

// UnsafePatchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PatchServer will
// result in compilation errors.
type UnsafePatchServer interface {
	mustEmbedUnimplementedPatchServer()
}

func RegisterPatchServer(s grpc.ServiceRegistrar, srv PatchServer) {
	s.RegisterService(&Patch_ServiceDesc, srv)
}

func _Patch_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatchServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Patch/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatchServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Patch_RightsCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RightsCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatchServer).RightsCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Patch/RightsCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatchServer).RightsCheck(ctx, req.(*RightsCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Patch_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PatchServer).UploadFile(&patchUploadFileServer{stream})
}

type Patch_UploadFileServer interface {
	SendAndClose(*UploadFileResponse) error
	Recv() (*UploadFileRequest, error)
	grpc.ServerStream
}

type patchUploadFileServer struct {
	grpc.ServerStream
}

func (x *patchUploadFileServer) SendAndClose(m *UploadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *patchUploadFileServer) Recv() (*UploadFileRequest, error) {
	m := new(UploadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Patch_ApplyPatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ApplyPatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PatchServer).ApplyPatch(m, &patchApplyPatchServer{stream})
}

type Patch_ApplyPatchServer interface {
	Send(*ApplyPatchResponse) error
	grpc.ServerStream
}

type patchApplyPatchServer struct {
	grpc.ServerStream
}

func (x *patchApplyPatchServer) Send(m *ApplyPatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Patch_ServiceDesc is the grpc.ServiceDesc for Patch service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Patch_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Patch",
	HandlerType: (*PatchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Patch_Ping_Handler,
		},
		{
			MethodName: "RightsCheck",
			Handler:    _Patch_RightsCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _Patch_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ApplyPatch",
			Handler:       _Patch_ApplyPatch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "patch_service.proto",
}
