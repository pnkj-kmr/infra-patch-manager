// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PatchClient is the client API for Patch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PatchClient interface {
	// unary rpc - ping status check
	Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error)
	// unary rpc - read/write rights check
	Checks(ctx context.Context, in *RightsReq, opts ...grpc.CallOption) (*RightsResp, error)
	// client streaming rpc - file upload in chunks
	Upload(ctx context.Context, opts ...grpc.CallOption) (Patch_UploadClient, error)
	// unary rpc - extract file
	Extract(ctx context.Context, in *ExtractReq, opts ...grpc.CallOption) (*ExtractResp, error)
	// server streaming rpc - applying patch
	Apply(ctx context.Context, in *ApplyReq, opts ...grpc.CallOption) (Patch_ApplyClient, error)
	// server streaming rpc - verify patch
	Verify(ctx context.Context, in *VerifyReq, opts ...grpc.CallOption) (Patch_VerifyClient, error)
	// unary rpc - cmd
	Execute(ctx context.Context, in *CmdReq, opts ...grpc.CallOption) (*CmdResp, error)
}

type patchClient struct {
	cc grpc.ClientConnInterface
}

func NewPatchClient(cc grpc.ClientConnInterface) PatchClient {
	return &patchClient{cc}
}

func (c *patchClient) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error) {
	out := new(PingResp)
	err := c.cc.Invoke(ctx, "/Patch/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patchClient) Checks(ctx context.Context, in *RightsReq, opts ...grpc.CallOption) (*RightsResp, error) {
	out := new(RightsResp)
	err := c.cc.Invoke(ctx, "/Patch/Checks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patchClient) Upload(ctx context.Context, opts ...grpc.CallOption) (Patch_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Patch_ServiceDesc.Streams[0], "/Patch/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &patchUploadClient{stream}
	return x, nil
}

type Patch_UploadClient interface {
	Send(*UploadReq) error
	CloseAndRecv() (*UploadResp, error)
	grpc.ClientStream
}

type patchUploadClient struct {
	grpc.ClientStream
}

func (x *patchUploadClient) Send(m *UploadReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *patchUploadClient) CloseAndRecv() (*UploadResp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *patchClient) Extract(ctx context.Context, in *ExtractReq, opts ...grpc.CallOption) (*ExtractResp, error) {
	out := new(ExtractResp)
	err := c.cc.Invoke(ctx, "/Patch/Extract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patchClient) Apply(ctx context.Context, in *ApplyReq, opts ...grpc.CallOption) (Patch_ApplyClient, error) {
	stream, err := c.cc.NewStream(ctx, &Patch_ServiceDesc.Streams[1], "/Patch/Apply", opts...)
	if err != nil {
		return nil, err
	}
	x := &patchApplyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Patch_ApplyClient interface {
	Recv() (*ApplyResp, error)
	grpc.ClientStream
}

type patchApplyClient struct {
	grpc.ClientStream
}

func (x *patchApplyClient) Recv() (*ApplyResp, error) {
	m := new(ApplyResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *patchClient) Verify(ctx context.Context, in *VerifyReq, opts ...grpc.CallOption) (Patch_VerifyClient, error) {
	stream, err := c.cc.NewStream(ctx, &Patch_ServiceDesc.Streams[2], "/Patch/Verify", opts...)
	if err != nil {
		return nil, err
	}
	x := &patchVerifyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Patch_VerifyClient interface {
	Recv() (*VerifyResp, error)
	grpc.ClientStream
}

type patchVerifyClient struct {
	grpc.ClientStream
}

func (x *patchVerifyClient) Recv() (*VerifyResp, error) {
	m := new(VerifyResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *patchClient) Execute(ctx context.Context, in *CmdReq, opts ...grpc.CallOption) (*CmdResp, error) {
	out := new(CmdResp)
	err := c.cc.Invoke(ctx, "/Patch/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PatchServer is the server API for Patch service.
// All implementations must embed UnimplementedPatchServer
// for forward compatibility
type PatchServer interface {
	// unary rpc - ping status check
	Ping(context.Context, *PingReq) (*PingResp, error)
	// unary rpc - read/write rights check
	Checks(context.Context, *RightsReq) (*RightsResp, error)
	// client streaming rpc - file upload in chunks
	Upload(Patch_UploadServer) error
	// unary rpc - extract file
	Extract(context.Context, *ExtractReq) (*ExtractResp, error)
	// server streaming rpc - applying patch
	Apply(*ApplyReq, Patch_ApplyServer) error
	// server streaming rpc - verify patch
	Verify(*VerifyReq, Patch_VerifyServer) error
	// unary rpc - cmd
	Execute(context.Context, *CmdReq) (*CmdResp, error)
	mustEmbedUnimplementedPatchServer()
}

// UnimplementedPatchServer must be embedded to have forward compatible implementations.
type UnimplementedPatchServer struct {
}

func (UnimplementedPatchServer) Ping(context.Context, *PingReq) (*PingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedPatchServer) Checks(context.Context, *RightsReq) (*RightsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Checks not implemented")
}
func (UnimplementedPatchServer) Upload(Patch_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedPatchServer) Extract(context.Context, *ExtractReq) (*ExtractResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Extract not implemented")
}
func (UnimplementedPatchServer) Apply(*ApplyReq, Patch_ApplyServer) error {
	return status.Errorf(codes.Unimplemented, "method Apply not implemented")
}
func (UnimplementedPatchServer) Verify(*VerifyReq, Patch_VerifyServer) error {
	return status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedPatchServer) Execute(context.Context, *CmdReq) (*CmdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedPatchServer) mustEmbedUnimplementedPatchServer() {}

// UnsafePatchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PatchServer will
// result in compilation errors.
type UnsafePatchServer interface {
	mustEmbedUnimplementedPatchServer()
}

func RegisterPatchServer(s grpc.ServiceRegistrar, srv PatchServer) {
	s.RegisterService(&Patch_ServiceDesc, srv)
}

func _Patch_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatchServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Patch/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatchServer).Ping(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Patch_Checks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RightsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatchServer).Checks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Patch/Checks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatchServer).Checks(ctx, req.(*RightsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Patch_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PatchServer).Upload(&patchUploadServer{stream})
}

type Patch_UploadServer interface {
	SendAndClose(*UploadResp) error
	Recv() (*UploadReq, error)
	grpc.ServerStream
}

type patchUploadServer struct {
	grpc.ServerStream
}

func (x *patchUploadServer) SendAndClose(m *UploadResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *patchUploadServer) Recv() (*UploadReq, error) {
	m := new(UploadReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Patch_Extract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatchServer).Extract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Patch/Extract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatchServer).Extract(ctx, req.(*ExtractReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Patch_Apply_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ApplyReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PatchServer).Apply(m, &patchApplyServer{stream})
}

type Patch_ApplyServer interface {
	Send(*ApplyResp) error
	grpc.ServerStream
}

type patchApplyServer struct {
	grpc.ServerStream
}

func (x *patchApplyServer) Send(m *ApplyResp) error {
	return x.ServerStream.SendMsg(m)
}

func _Patch_Verify_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VerifyReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PatchServer).Verify(m, &patchVerifyServer{stream})
}

type Patch_VerifyServer interface {
	Send(*VerifyResp) error
	grpc.ServerStream
}

type patchVerifyServer struct {
	grpc.ServerStream
}

func (x *patchVerifyServer) Send(m *VerifyResp) error {
	return x.ServerStream.SendMsg(m)
}

func _Patch_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatchServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Patch/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatchServer).Execute(ctx, req.(*CmdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Patch_ServiceDesc is the grpc.ServiceDesc for Patch service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Patch_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Patch",
	HandlerType: (*PatchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Patch_Ping_Handler,
		},
		{
			MethodName: "Checks",
			Handler:    _Patch_Checks_Handler,
		},
		{
			MethodName: "Extract",
			Handler:    _Patch_Extract_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _Patch_Execute_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _Patch_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Apply",
			Handler:       _Patch_Apply_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Verify",
			Handler:       _Patch_Verify_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "patch_service.proto",
}
